version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: rpi4-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - rpi4_network

  device-detector:
    build:
      context: ./device-detector
      dockerfile: Dockerfile
    container_name: rpi4-device-detector
    restart: unless-stopped
    privileged: true  # Required for udev access
    volumes:
      - /run/udev:/run/udev:ro  # udev socket access
      - /dev:/dev:ro            # Device nodes access
    environment:
      - REDIS_HOST=redis
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - rpi4_network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.Redis(host='redis').ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Redis event consumer for testing
  event-consumer:
    image: redis:7-alpine
    container_name: rpi4-event-consumer
    depends_on:
      - redis
    networks:
      - rpi4_network
    command: >
      sh -c "
        echo 'Subscribing to device_events channel...'
        redis-cli -h redis SUBSCRIBE device_events
      "
    profiles:
      - testing

volumes:
  redis_data:
    driver: local

networks:
  rpi4_network:
    driver: bridge